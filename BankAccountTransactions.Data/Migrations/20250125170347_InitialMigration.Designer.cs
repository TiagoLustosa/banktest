// <auto-generated />
using System;
using BankAccountTransactions.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankAccountTransactions.Data.Migrations
{
    [DbContext(typeof(BankAccountTransactionsContext))]
    [Migration("20250125170347_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankAccountTransactions.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("varchar(18)")
                        .HasColumnName("accountNumber");

                    b.Property<double>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customerId");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.ToTable("accounts", "bank");
                });

            modelBuilder.Entity("BankAccountTransactionsDomain.Entity.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<double>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("ReceiverDocument")
                        .IsRequired()
                        .HasColumnType("varchar(18)")
                        .HasColumnName("receiverDocument");

                    b.Property<string>("SenderDocument")
                        .IsRequired()
                        .HasColumnType("varchar(18)")
                        .HasColumnName("senderDocument");

                    b.HasKey("Id");

                    b.ToTable("transactions", "bank");
                });

            modelBuilder.Entity("BankAccountTransactionsDomain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("accountId");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("varchar(18)")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(70)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("userType");

                    b.HasKey("Id");

                    b.HasIndex("Document")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Document");

                    b.ToTable("users", "bank", t =>
                        {
                            t.HasCheckConstraint("CK_users_userType_Enum", "\"userType\" IN ('PF', 'PJ')");
                        });
                });

            modelBuilder.Entity("BankAccountTransactions.Domain.Account", b =>
                {
                    b.HasOne("BankAccountTransactionsDomain.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
